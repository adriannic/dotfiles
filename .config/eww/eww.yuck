(defvar workspaces
  '[{"icon":"","index":1},{"icon":"","index":2},{"icon":"","index":3},{"icon":"󰈹","index":4},{"icon":"","index":5},{"icon":"󰙯","index":6},{"icon":"","index":7},{"icon":"","index":8}]'
)

(defvar is-bar-visible
  "true"
)

(defvar is-notifications-visible-0
  "false"
)

(defvar is-notifications-visible-1
  "false"
)

(defvar battery-icons
  '{"Charging":"󰂄","Discharging":["󰂎","󰁺","󰁻","󰁼","󰁽","󰁾","󰁿","󰂀","󰂁","󰂂","󰁹"]}'
)

(defvar net-icons
  '{"none":"󱛇","portal":"󱚵","limited":"󱚵","full":"󰖩","unknown":"󰖪"}'
)

(defvar selected-util
  ""
)

(deflisten active-workspaces
  "./scripts/active-workspace"
)

(defpoll time
  :interval "1s"
  "date +%H:%M"
)

(defpoll vol
  :interval "1s"
  "~/.config/eww/scripts/getvol.sh"
)

(defpoll bluetooth
  :interval "1s"
  "bluetoothctl show | grep Powered | cut -d' ' -f2"
)

(defpoll brightness
  :interval "1s"
  "brightnessctl -m | cut -d',' -f4 | cut -d'%' -f1"
)

(defpoll battery
  :interval "5s"
  "cat /sys/class/power_supply/BAT0/capacity"
)

(defpoll battery-state
  :interval "5s"
  "cat /sys/class/power_supply/BAT0/status"
)

(defpoll net-enabled
  :interval "5s"
  "LC_ALL=C nmcli networking"
)

(defpoll net-state
  :interval "5s"
  "LC_ALL=C nmcli networking connectivity"
)

(defpoll cal-day
  :interval "1h"
  "date +%d"
)

(defpoll cal-month
  :interval "10h"
  "date +%B"
)

(defpoll cal-year
  :interval "10h"
  "date +%Y"
)

(deflisten song
  "~/.config/eww/scripts/getsong.sh"
)
(defpoll notifications
  :interval "5s"
  "dunstctl history | jq"
)

(defwidget bar-widget [n]
  (box
    :orientation "v"
    :space-evenly false
    (revealer
      :transition "slideup"
      :reveal is-bar-visible
      :duration "250ms"
      (centerbox
        :class "bar"
        :height 45
        :orientation "h"
        (workspaces
          :n n
        )
        (box
          :halign "center"
        )
        (util-bar
          :n n
        )
      )
    )
  )
)

(defwidget workspaces [n]
  (box
    :class "workspaces"
    :space-evenly true
    :halign "start"
    :spacing 0
    (for workspace in workspaces
      (button
        :onclick "~/.config/hypr/scripts/workspaces ${workspace.index}"
        (box
         :class "${active-workspaces[n] == workspace.index ? 'active-workspace' : ''}"
         {workspace.icon}
        )
      )
    )
  )
)

(defwidget battery-indicator []
  (eventbox
    :visible {battery != ""}
    :onhover "eww update selected-util='battery-indicator'"
    :onhoverlost "eww update selected-util=''"
    (box
      :class "util"
      :space-evenly false
      '${(battery-state == "Charging") ? battery-icons[battery-state] : battery-icons["Discharging"][(battery - battery%10)/10]}'
      (revealer
        :transition "slideleft"
        :duration "250ms"
        :reveal {selected-util == 'battery-indicator'}
        (label
          :class "util-reveal"
          :text ' ${battery}%'
        )
      )
    )
  )
)

(defwidget brightness-indicator []
  (eventbox
    :visible {brightness != ""}
    :onhover "eww update selected-util='brightness-indicator'"
    :onhoverlost "eww update selected-util=''"
    :tooltip "${brightness}%"
    (box
      :class "util"
      :space-evenly false
      '󰃟'
      (revealer
        :transition "slideleft"
        :duration "250ms"
        :reveal {selected-util == 'brightness-indicator'}
        (scale
          :class "util-reveal"
          :onchange "brightnessctl set {}% && swayosd-client --brightness 0"
          :value brightness
        )
      )
    )
  )
)

(defwidget net-indicator []
  (eventbox
    :onclick "networkmanager_dmenu"
    :onhover "eww update selected-util='net-indicator'"
    :onhoverlost "eww update selected-util=''"
    (box
      :class "util"
      :space-evenly false
      "${net-enabled == 'enabled' ? net-icons[net-state] : '󰖪'}"
      (revealer
        :transition "slideleft"
        :duration "250ms"
        :reveal {selected-util == 'net-indicator'}
        (label
          :class "util-reveal"
          :text '${net-state}'
        )
      )
    )
  )
)

(defwidget bt-indicator []
  (eventbox
    :onclick "blueberry"
    :onhover "eww update selected-util='bt-indicator'"
    :onhoverlost "eww update selected-util=''"
    (box
      :class "util"
      :space-evenly false
      {bluetooth == "yes" ? "󰂯" : "󰂲"}
      (revealer
        :transition "slideleft"
        :duration "250ms"
        :reveal {selected-util == 'bt-indicator'}
        (label
          :class "util-reveal"
          :text "${bluetooth == "yes" ? "on" : "off"}"
        )
      )
    )
  )
)

(defwidget vol-indicator []
  (eventbox
    :onclick "hyprctl dispatch exec pavucontrol"
    :onhover "eww update selected-util='vol-indicator'"
    :onhoverlost "eww update selected-util=''"
    :tooltip "${vol[0].volume}%"
    (box
      :class "util"
      :space-evenly false
      {vol[0].muted == 1 ? '󰖁' : ''}
      (revealer
        :transition "slideleft"
        :duration "250ms"
        :reveal {selected-util == 'vol-indicator'}
        (scale
          :class "util-reveal"
          :onchange "wpctl set-volume -l 1 @DEFAULT_AUDIO_SINK@ {}% && swayosd-client --output-volume 0"
          :value {vol[0].volume}
        )
      )
    )
  )
)

(defwidget mic-indicator []
  (eventbox
    :onclick "hyprctl dispatch exec pavucontrol"
    :onhover "eww update selected-util='mic-indicator'"
    :onhoverlost "eww update selected-util=''"
    :tooltip "${vol[1].volume}%"
    (box
      :class "util"
      :space-evenly false
      {vol[1].muted == 1 ? '' : ''}
      (revealer
        :transition "slideleft"
        :duration "250ms"
        :reveal {selected-util == 'mic-indicator'}
        (scale
          :class "util-reveal"
          :onchange "wpctl set-volume -l 1 @DEFAULT_AUDIO_SOURCE@ {}% && swayosd-client --input-volume 0"
          :value {vol[1].volume}
        )
      )
    )
  )
)

(defwidget clock [n]
  (eventbox
    :onclick "eww open --toggle cal-window-${n}"
    (button
      :class "util"
      :onclick "eww open --toggle cal-window-${n}"
      (label
        :xalign 0.5
        :text time
      )
    )
  )
)

(defwidget util-bar [n]
  (box
    :class "util-bar"
    :halign "end"
    :space-evenly false
    (battery-indicator)
    (brightness-indicator)
    (net-indicator)
    (bt-indicator)
    (vol-indicator)
    (mic-indicator)
    (clock
      :n n
    )
  )
)

(defwidget cal []
  (box
    :class "cal-box"
    (calendar
      :day cal-day
      :month cal-month
      :year cal-year
      :show-week-numbers false
    )
  )
)

(defwindow cal-window-0
  :monitor 0
  :geometry (geometry
    :width "255px"
    :anchor "bottom right"
  )
  :stacking "overlay"
  :focusable false
  :namespace "eww"
  (cal)
)

(defwindow cal-window-1
  :monitor 1
  :geometry (geometry
    :width "255px"
    :anchor "bottom right"
  )
  :stacking "overlay"
  :focusable false
  :namespace "eww"
  (cal)
)

(defwindow bar-0
  :monitor 0
  :geometry (geometry
    :width "100%"
    :anchor "bottom center"
  )
  :stacking "fg"
  :exclusive true
  :focusable false
  :namespace "eww"
  (bar-widget
    :n 0
  )
)

(defwindow bar-1
  :monitor 1
  :geometry (geometry
    :width "100%"
    :anchor "bottom center"
  )
  :stacking "fg"
  :exclusive true
  :focusable false
  :namespace "eww"
  (bar-widget
    :n 1
  )
)

(defwidget powermenu-widget []
  (box
    :class "powermenu-bg"
    (box
      :orientation "v"
      :valign "center"
      (box
        :width "480px"
        :height "160px"
        :spacing 10
        :orientation "h"
        :halign "center"
        (button
          :onclick "bash ~/.config/swaylock/pywal.sh && echo"
          :class "powermenu-button"
          ""
        )
        (button
          :onclick "reboot"
          :class "powermenu-button"
          "󰑓"
        )
        (button
          :onclick "shutdown now"
          :class "powermenu-button"
          "󰤆"
        )
      )
    )
  )
)

(defwindow powermenu-0
  :monitor 0
  :geometry (geometry
    :width "100%"
    :height "105%"
    :anchor "center center"
  )
  :stacking "overlay"
  :exclusive false
  :focusable false
  :namespace "eww"
  (powermenu-widget)
)

(defwindow powermenu-1
  :monitor 1
  :geometry (geometry
    :width "100%"
    :height "105%"
    :anchor "center center"
  )
  :stacking "overlay"
  :exclusive false
  :focusable false
  :namespace "eww"
  (powermenu-widget)
)
